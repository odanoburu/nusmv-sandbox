MODULE main
 VAR
   -- decide which thing farmer will take with her, if anything
   takes : {nothing, cabbage, lamb, wolf} ;
   -- is thing over the river?
   cabbage-over : boolean ;
   lamb-over    : boolean ;
   wolf-over    : boolean ;
   farmer-over  : boolean ;
 ASSIGN
   -- takes nothing in the first round
   init(takes) := nothing ;
   -- everyone starts not-over the river
   init(cabbage-over) := FALSE ;
   init(lamb-over)    := FALSE ;
   init(wolf-over)    := FALSE ;
   init(farmer-over)  := FALSE ;
   -- what the farmer takes with her -- which can be anything or
   -- nothing, as long as the thing is in the same side as she is
   next(takes) := case
                    farmer-over = cabbage-over & farmer-over = lamb-over & farmer-over = lamb-over : {nothing, cabbage, lamb, wolf} ;
                    farmer-over = cabbage-over & farmer-over = lamb-over : {nothing, cabbage, lamb} ;
                    farmer-over = cabbage-over & farmer-over = wolf-over : {nothing, cabbage, wolf} ;
                    farmer-over = lamb-over & farmer-over = wolf-over : {nothing, lamb, wolf} ;
                    farmer-over = cabbage-over : {nothing, cabbage} ;
                    farmer-over = lamb-over : {nothing, lamb} ;
                    farmer-over = wolf-over : {nothing, wolf} ;
                    TRUE : nothing ;
                  esac ;
   -- move thing?
   next(cabbage-over) := next(takes) = cabbage ? ! cabbage-over : cabbage-over ;
   next(lamb-over)    := next(takes) = lamb ? ! lamb-over : lamb-over ;
   next(wolf-over)    := next(takes) = wolf ? ! wolf-over : wolf-over ;
   -- farmer always moves
   --- exercise : give her the possibility of staying put (she might
   --- be tired after all this rowing)
   next(farmer-over)  := ! farmer-over ;
   
 CTLSPEC NAME solution := ! E [((farmer-over != cabbage-over -> farmer-over = lamb-over) -- cabbage is safe
                                & (farmer-over != lamb-over -> farmer-over = wolf-over)) -- lamb is safe
                                -- until it is over
                                U count(farmer-over, cabbage-over, lamb-over, wolf-over) = 4]
